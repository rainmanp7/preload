preload 0.6.3 release
=====================

- Proof that I'm an idiot.

- Make state parsing work again.

preload 0.6.2 release
=====================

- Correctly fix the previous fork craziness issue.  Real cause of the bug
  revealed to me by Kai Krakow.

- Do O_NOATIME when readahead'ing.

preload 0.6.1 release
=====================

- Fix bug where preload was spawning thousands of processes.  I have not
  fully understood how that happened, but the fix is right.  Still
  investigating.

- Revert a previous change: Start daemon on runlevels 2345 by default.

preload 0.6 release
===================

- Implement various sorting strategies, defaulting to sort based on disk
  block.  Note that there was a bug in previous releases, causing no sorting
  to happen at all.  Not even on file path.  The added config key is called
  system.sortstrategy.

- Implement parallel readahead.  A new config key system.maxprocs controls
  that.  Defaults to 30 processes.

- Implement readahead request merging.

- Change default memory settings to be much more conservative: consume 50%
  of free mem minus 10% of total, and none of the cached.

- Support running under ionice, from the init script.  Defaults to idle I/O
  priority and can be set in the sysconfig config script.  This may be moved
  to the daemon itself.

- Other small fixes to prepheral files, mostly picked from Fedora and Ubuntu,
  including plugging an fd leak.

Thanks to everyone who sent me patches.  Also thanks to Ubuntu and Fedora
packagers.  This release should incorporate all their changes either
directly or with my own implementation.

preload 0.4 release
===================
* Improved build system.
* state file moved from /var/preload to /var/lib/preload to follow FHS.
* LSB INIT INFO block added to the preload.init template.
* A crasher with access control lists not matching a file fixed.
* Fix crasher on 64-bit systems.

preload 0.2 release
===================

This is the first public release of preload.  It runs as a daemon and
monitors processes through /proc and predicts applications that may
run and prefetches binaries and shared object.  In my experience, it
reduced the startup time of OpenOffice.org writer right after a reboot
from 13 seconds to 7 seconds, and Firefox from 9 to 7.  It also decreased
the time from entering login/password information in gdm to a usable
dekstop is loaded from 37s to 32s.  On the other hand though, the time
from power button is pressed to gdm login screen is functional, was
increased from 65s to 85s, due to excessive harddisk activitiy caused
by preload.
